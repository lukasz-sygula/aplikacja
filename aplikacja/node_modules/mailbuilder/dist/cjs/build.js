"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.simpleHtmlEmail = exports.buildHeaders = void 0;
const rfc_822_date_js_1 = require("./rfc-822-date.js");
const header_js_1 = require("./header.js");
/**
 * @param {MailBuildingParams} options
 * @returns {string}
 */
function buildHeaders(options) {
    // require required
    if (typeof options.from !== 'object' && typeof options.from !== 'string')
        throw new TypeError(`Parameter "from" is required and must be either string or object with name/address properties`);
    if (!Array.isArray(options.to) && typeof options.to !== 'string')
        throw new TypeError('Parameter "to" must be either a single email address or an array');
    const res = [
        `Content-Type: ${options.contentType || 'text/html; charset=utf-8'}`,
        'Content-Transfer-Encoding: 8Bit',
        `From: ${typeof options.from === 'string'
            ? options.from
            : header_js_1.getAddressesHeader([options.from])}`,
        `To: ${typeof options.to === 'string'
            ? options.to
            : header_js_1.getAddressesHeader(options.to)}`,
        'MIME-Version: 1.0',
    ];
    if (options.date)
        res.push(`Date: ${rfc_822_date_js_1.rfc822dateString(options.date)}`);
    if (Array.isArray(options.bcc))
        res.push(`Bcc: ${header_js_1.getAddressesHeader(options.bcc)}`);
    else if (typeof options.bcc === 'string')
        res.push(`Bcc: ${options.bcc}`);
    if (options.subject)
        res.push(`Subject: ${header_js_1.encodeIfNeeded(options.subject)}`);
    return res.join('\n');
}
exports.buildHeaders = buildHeaders;
/**
 * Returns complete MIME-body of email message with only HTML body
 *
 * @param {MailBuildingParams} params
 * @returns {string}
 */
function simpleHtmlEmail(params) {
    if ('attachments' in params)
        throw new TypeError(`This function doesn't support building messages with attachments`);
    if (typeof params.html !== 'string')
        throw new TypeError(`Build params must have "html" property with type of string`);
    return `${buildHeaders(params)}\n\n${params.html}`;
}
exports.simpleHtmlEmail = simpleHtmlEmail;
//# sourceMappingURL=build.js.map